// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/messages.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Contact struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contact) Reset()         { *m = Contact{} }
func (m *Contact) String() string { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()    {}
func (*Contact) Descriptor() ([]byte, []int) {
	return fileDescriptor_c845ec2cade4e162, []int{0}
}

func (m *Contact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contact.Unmarshal(m, b)
}
func (m *Contact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contact.Marshal(b, m, deterministic)
}
func (m *Contact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contact.Merge(m, src)
}
func (m *Contact) XXX_Size() int {
	return xxx_messageInfo_Contact.Size(m)
}
func (m *Contact) XXX_DiscardUnknown() {
	xxx_messageInfo_Contact.DiscardUnknown(m)
}

var xxx_messageInfo_Contact proto.InternalMessageInfo

func (m *Contact) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Contact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type ContactRequest struct {
	Contact              *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactRequest) Reset()         { *m = ContactRequest{} }
func (m *ContactRequest) String() string { return proto.CompactTextString(m) }
func (*ContactRequest) ProtoMessage()    {}
func (*ContactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c845ec2cade4e162, []int{1}
}

func (m *ContactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactRequest.Unmarshal(m, b)
}
func (m *ContactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactRequest.Marshal(b, m, deterministic)
}
func (m *ContactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRequest.Merge(m, src)
}
func (m *ContactRequest) XXX_Size() int {
	return xxx_messageInfo_ContactRequest.Size(m)
}
func (m *ContactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRequest proto.InternalMessageInfo

func (m *ContactRequest) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type ContactResponse struct {
	Contact              *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactResponse) Reset()         { *m = ContactResponse{} }
func (m *ContactResponse) String() string { return proto.CompactTextString(m) }
func (*ContactResponse) ProtoMessage()    {}
func (*ContactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c845ec2cade4e162, []int{2}
}

func (m *ContactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactResponse.Unmarshal(m, b)
}
func (m *ContactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactResponse.Marshal(b, m, deterministic)
}
func (m *ContactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactResponse.Merge(m, src)
}
func (m *ContactResponse) XXX_Size() int {
	return xxx_messageInfo_ContactResponse.Size(m)
}
func (m *ContactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContactResponse proto.InternalMessageInfo

func (m *ContactResponse) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func init() {
	proto.RegisterType((*Contact)(nil), "Contact")
	proto.RegisterType((*ContactRequest)(nil), "ContactRequest")
	proto.RegisterType((*ContactResponse)(nil), "ContactResponse")
}

func init() { proto.RegisterFile("pb/messages.proto", fileDescriptor_c845ec2cade4e162) }

var fileDescriptor_c845ec2cade4e162 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x48, 0xd2, 0xcf,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x8a, 0xe4,
	0x62, 0x77, 0xce, 0xcf, 0x2b, 0x49, 0x4c, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0x53, 0x73, 0x13,
	0x33, 0x73, 0x24, 0x98, 0xc1, 0x82, 0x10, 0x0e, 0x48, 0xb4, 0x20, 0x23, 0x3f, 0x2f, 0x55, 0x82,
	0x05, 0x22, 0x0a, 0xe6, 0x28, 0x99, 0x70, 0xf1, 0x41, 0x8d, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x52, 0xe2, 0x62, 0x4f, 0x86, 0x88, 0x80, 0xad, 0xe1, 0x36, 0xe2, 0xd0, 0x83, 0xa9,
	0x80, 0x49, 0x28, 0x99, 0x72, 0xf1, 0xc3, 0x75, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x12, 0xa3,
	0xcd, 0xa8, 0x0a, 0x6e, 0x59, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x3e, 0x17, 0x97,
	0x63, 0x4a, 0x0a, 0xcc, 0x73, 0xfc, 0x7a, 0xa8, 0x6e, 0x91, 0x12, 0xd0, 0x43, 0xb7, 0xc6, 0x9c,
	0x8b, 0xcf, 0x31, 0x25, 0xc5, 0x31, 0x27, 0x07, 0x2a, 0x51, 0x4c, 0x84, 0x26, 0x0d, 0x46, 0x03,
	0xc6, 0x24, 0x36, 0x70, 0x50, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x85, 0x6a, 0x18, 0x44,
	0x5f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactServiceClient interface {
	AddContact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	AddAllContacts(ctx context.Context, opts ...grpc.CallOption) (ContactService_AddAllContactsClient, error)
}

type contactServiceClient struct {
	cc *grpc.ClientConn
}

func NewContactServiceClient(cc *grpc.ClientConn) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) AddContact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/ContactService/AddContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) AddAllContacts(ctx context.Context, opts ...grpc.CallOption) (ContactService_AddAllContactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContactService_serviceDesc.Streams[0], "/ContactService/AddAllContacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &contactServiceAddAllContactsClient{stream}
	return x, nil
}

type ContactService_AddAllContactsClient interface {
	Send(*ContactRequest) error
	Recv() (*ContactResponse, error)
	grpc.ClientStream
}

type contactServiceAddAllContactsClient struct {
	grpc.ClientStream
}

func (x *contactServiceAddAllContactsClient) Send(m *ContactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactServiceAddAllContactsClient) Recv() (*ContactResponse, error) {
	m := new(ContactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContactServiceServer is the server API for ContactService service.
type ContactServiceServer interface {
	AddContact(context.Context, *ContactRequest) (*ContactResponse, error)
	AddAllContacts(ContactService_AddAllContactsServer) error
}

func RegisterContactServiceServer(s *grpc.Server, srv ContactServiceServer) {
	s.RegisterService(&_ContactService_serviceDesc, srv)
}

func _ContactService_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactService/AddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).AddContact(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_AddAllContacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactServiceServer).AddAllContacts(&contactServiceAddAllContactsServer{stream})
}

type ContactService_AddAllContactsServer interface {
	Send(*ContactResponse) error
	Recv() (*ContactRequest, error)
	grpc.ServerStream
}

type contactServiceAddAllContactsServer struct {
	grpc.ServerStream
}

func (x *contactServiceAddAllContactsServer) Send(m *ContactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactServiceAddAllContactsServer) Recv() (*ContactRequest, error) {
	m := new(ContactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ContactService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContact",
			Handler:    _ContactService_AddContact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddAllContacts",
			Handler:       _ContactService_AddAllContacts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/messages.proto",
}
